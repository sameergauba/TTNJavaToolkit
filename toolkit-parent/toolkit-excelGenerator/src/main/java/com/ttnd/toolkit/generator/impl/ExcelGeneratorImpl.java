/**
 * 
 */
package com.ttnd.toolkit.generator.impl;

import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.List;

import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.Row;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.ttnd.toolkit.generator.ExcelGenerator;

/**
 * A class to generate excel file in .xsl or .xslx format. This class with
 * accept a List which contain list of Objects(List<List<String> data). The user
 * has to set the name of the excel file to be generated by setting fileName
 * field.
 * 
 * 
 * @author nidhi
 *
 */
public class ExcelGeneratorImpl implements ExcelGenerator {

	private static final Logger logger = LoggerFactory.getLogger(ExcelGeneratorImpl.class);
	private String fileName;
	private HSSFWorkbook workbook;
	private HSSFSheet sheet;
	private String sheetName;

	/**
	 * A class to generate excel file in .xsl or .xslx format. This class with
	 * accept a List which contain list of Objects(List<List<String> data). The
	 * user has to set the name of the excel file to be generated by setting
	 * fileName field.
	 * 
	 * 
	 * @author nidhi
	 *
	 */
	public ExcelGeneratorImpl() {
		super();
		// TODO Auto-generated constructor stub
	}

	/**
	 * @return the name of the excel file which is generated.
	 */
	@Override
	public String getFileName() {
		return fileName;
	}

	/**
	 * @param fileName
	 *            the name of the excel file to be generated
	 */
	@Override
	public void setFileName(String fileName) {
		this.fileName = fileName;
	}

	/**
	 * @param workbook
	 *            the workbook to which new generated sheets will be added after
	 *            data is written to them.
	 */
	@Override
	public void setWorkbook(HSSFWorkbook workbook) {
		this.workbook = workbook;
	}

	/**
	 * @param sheet
	 *            the sheet to which data will be written and then added to the
	 *            workbook.
	 */
	@Override
	public void setSheet(HSSFSheet sheet) {
		this.sheet = sheet;
	}

	/**
	 * @param sheetName
	 *            the name of the sheets that will be added to the workbook. An
	 *            integer is added to this name which increments as the sheets
	 *            are added.
	 */
	@Override
	public void setSheetName(String sheetName) {
		this.sheetName = sheetName;
	}

	/**
	 * @return the name of the sheets added to workbook
	 */
	@Override
	public String getSheetName() {
		if (sheetName == null)
			sheetName = "Sheet1";
		else {
			int count = getWorkbook().getNumberOfSheets() + 1;
			sheetName = "Sheet" + count;
		}
		return sheetName;
	}

	/**
	 * @return the workbook to which sheets are added after writing the data to
	 *         them.
	 */
	@Override
	public HSSFWorkbook getWorkbook() {
		if (workbook == null)
			workbook = new HSSFWorkbook();
		return workbook;
	}

	/**
	 * @return a new blank sheet is generated in current workbook and returned.
	 */
	private HSSFSheet getSheet() {
		// if (sheet == null)
		return getWorkbook().createSheet(getSheetName());
		// return sheet;
	}

	/**
	 * Writes the data, given in the parameter by the user, on the sheet
	 * returned by getSheet() method of this class
	 * 
	 * @param dataList
	 *            The list of the lists of strings, where each list of string
	 *            represent the data in each column of the excel sheet.
	 */
	@Override
	public void createExcel(List<List<String>> dataList) throws FileNotFoundException {

		int rownum = 0;
		int colnum = 0;
		if (dataList != null) {
			HSSFSheet sheet = getSheet();
			for (List<String> list : dataList) {
				colnum = 0;

				Row row = sheet.createRow(rownum);
				List<String> rowList = list;
				for (String data : rowList) {
					Cell cell = row.createCell(colnum);
					cell.setCellValue(data);
					sheet.autoSizeColumn(colnum);
					colnum++;
				}
				rownum++;
			}

		} else {
			throw new NullPointerException("dataList is Empty");
		}
	}

	/**
	 * Writes the data from the workbook created to a file with filename as set
	 * by the user in the field fileName.
	 * @throws IOException 
	 */
	@Override
	public void addToExcelFile() throws IOException {
		FileOutputStream fileOut = new FileOutputStream(getFileName());
			getWorkbook().write(fileOut);
			fileOut.flush();
			fileOut.close();

	}
}
